eval(atob(';(() => {
    let hasMouse = true

    addKeyComboListener(' + + ', () => {
        let exampleRoot = document.querySelector('.example')

        if (exampleRoot) return exampleRoot.remove()

        if (!hasMouse) return

        mount()
    })

    function destroy() {
        document.querySelector('.example')?.remove()
    }

    document.addEventListener('mouseenter', () => {
        hasMouse = true
        destroy()
    })

    document.addEventListener('mouseleave', () => {
        hasMouse = false
        destroy()
    })

    document.addEventListener('keydown', () => {
        destroy()
    })

    setInterval(() => {
        if (hasMouse) return

        destroy()
    }, 100)

    async function mount() {
        let users = await fetch('https://jsonplaceholder.typicode.com/users').then(res => res.json())
        let todos = await fetch('https://jsonplaceholder.typicode.com/todos').then(res => res.json())
        let usersById = users.reduce((acc, user) => ({ ...acc, [user.id]: user }), {})

        window.__USER_LIST_ITEM_CLICK_HANDLER__ = event => {
            setSelectedUser(event.currentTarget.dataset.userId)
        }

        function setSelectedUser(userId) {
            let user = usersById[userId]
            let userTodos = todos.filter(todo => todo.userId === user.id)
            let selectedUserName = exampleRoot.querySelector('.selected-user-details')
            let selectedUserTodos = exampleRoot.querySelector('.selected-user-todos')

            refreshUserList(userId)

            selectedUserName.innerHTML = pre(user)
            selectedUserTodos.innerHTML = userTodos.map(todo => `<li>${pre(todo)}</li>`).join('\n')
        }

        function refreshUserList(selectedUserId) {
            let items = [...exampleRoot.querySelector('.user-list').children]

            items.forEach(item => {
                let isSelected = item.dataset.userId === selectedUserId

                if (isSelected) {
                    item.classList.add('selected')
                } else {
                    item.classList.remove('selected')
                }
            })
        }

        let exampleRoot = fromHTML(`
            <div class="example">
                <header class="header">
                    Header
                </header>
                <aside class="aside">
                    <ul class="user-list">
                        ${users.map(user => `<li onclick="__USER_LIST_ITEM_CLICK_HANDLER__(event)" data-user-id=${user.id}>${pre(user)}</li>`).join('\n')}
                    </ul>
                </aside>
                <main>
                    <div class="selected-user-details"></div>
                    <ul class="selected-user-todos"></ul>
                </main>
                <footer class="footer">
                    Footer
                </footer>

                <style>
                    .example {
                        position: fixed;
                        top: 0;
                        bottom: 0;
                        left: 0;
                        right: 0;
                        background-color: #242424;
                        display: grid;
                        grid-template-areas: 'header header' 'aside main' 'footer footer';
                        grid-template-rows: auto 1fr auto;
                        grid-template-columns: 32rem 1fr;
                        height: 100vh;

                        * {
                            box-sizing: border-box;
                        }
            
                        header {
                            grid-area: header;
                            padding: 1rem;
                            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
                            font-size: 1rem;
                        }
            
                        aside {
                            grid-area: aside;
                            overflow-y: auto;
                            border-right: 1px solid rgba(255, 255, 255, 0.05);
                        }
            
                        main {
                            grid-area: main;
                            overflow-y: auto;
                        }
            
                        .selected-user-details {
                            pre {
                                font-size: 1rem;
                            }
                        }
            
                        footer {
                            grid-area: footer;
                            padding: 1rem;
                            border-top: 1px solid rgba(255, 255, 255, 0.05);
                            font-size: 1rem;
                        }
            
                        pre {
                            margin: 0;
                            padding: 1rem;
                            white-space: pre-wrap;
                            font-family: Consolas;
                            font-size: 0.75rem;
                        }
            
                        ul {
                            list-style: none;
                            padding: 0;
                            margin: 0;
                        }
            
                        li {
                            cursor: pointer;
                        }
            
                        li:not(:last-child) {
                            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
                        }
            
                        li:hover {
                            background-color: rgba(255, 255, 255, 0.1);
                        }
            
                        li.selected {
                            background-color: rgba(255, 255, 255, 0.15);
                        }
                    }
                </style>
            </div>
        `)[0]

        document.body.appendChild(exampleRoot)

        setSelectedUser(users[0].id + '')

        function pre(obj) {
            return `<pre>${JSON.stringify(obj, null, 2).replace(/"/g, '')}</pre>`
        }

        function fromHTML(html) {
            const temp = document.createElement('div')

            temp.innerHTML = html.trim()

            return temp.children
        }
    }

    function addKeyComboListener(combo, callback) {
        let keys = combo.split('+')
        let startKey = keys.shift()
        let chainKeys = [...keys]
        let isListening = false

        async function start(event) {
            let isStartKey = event.key === startKey

            if (!isStartKey) return

            if (isListening) return

            isListening = true

            chainKeys = [...keys]

            await chain()

            isListening = false
        }

        async function chain() {
            let key = chainKeys.shift()

            if (!key) return callback()

            let result = await waitForKey(key)
            let { isDifferentKey, hasTimedOut } = result
            let isChainBroken = isDifferentKey || hasTimedOut

            if (isChainBroken) return

            return chain()
        }

        document.addEventListener('keydown', start)
    }

    async function waitForKey(key, timeout = 1000) {
        return new Promise(resolve => {
            document.addEventListener('keydown', event => {
                if (event.key === key) {
                    resolve({ isSameKey: true })
                } else {
                    resolve({ isDifferentKey: true })
                }
            })
            setTimeout(() => resolve({ hasTimedOut: true }), timeout)
        })
    }
})()
'))